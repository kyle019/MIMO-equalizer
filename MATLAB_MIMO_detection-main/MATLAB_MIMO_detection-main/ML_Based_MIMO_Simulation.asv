function [ML_BER] = ML_Based_MIMO_Simulation(M, SNR, N_Iter, Modulation_Order)

%Transmit signal (symbol depending on modulation order)
if Modulation_Order == 2
    s = Antenna_Map(M, Modulation_Order);
    const_s = (1/sqrt(2))*Modulation_map(Modulation_Order); 

elseif Modulation_Order == 4
    % s1~s16 per antenna
else
    % s1~s64 per antenna
end

% Number of 16 Cases in s
s_NoC = ML_Number_Of_Cases(M, Modulation_Order);

ML_BER_num = zeros((2^Modulation_Order)^(M-1), 9);
for num00 = 1:(2^Modulation_Order)^(M-1)
    s_num = s(:, num00);
    % change s to bit code
    s_bit = Bit_Change(s_num, M);

%     for num0=1:9 % size(SNR) = (1,9)

        error_cnt(num0) = 0;
        scaling_factor = sqrt(10^(-SNR(num0)/20)); % ISSUE#1: Consider why this scailing factor is needed.
    
        for num3=1:N_Iter
            H = (1/sqrt(2))*randn(M,M) + i*(1/sqrt(2))*randn(M,M);
            n  = scaling_factor*((1/sqrt(2))*randn(M,1) + i*(1/sqrt(2))*randn(M,1));
            r  = H*s_num + n;

            % make csv file
            if num0 == 3
                if M == 2
                    csv_data = [num0, ...
                        reshape(real(r), [1, 2]), reshape(imag(r), [1, 2]), ...
                        reshape(real(H), [1, 4]), reshape(imag(H), [1, 4]), ...
                        reshape(real(const_s), [1, 4]), reshape(imag(const_s), [1, 4]), ...
                        reshape(real(s_num), [1, 2]), reshape(imag(s_num), [1, 2])];

                    writematrix(csv_data, 'MIMO_2_0dB.csv', 'WriteMode', 'append');       % Set train data

%                     if rem(num3, 5) == 0
%                         writematrix(csv_data, 'MIMO_2_0dB_test.csv', 'WriteMode', 'append');      % Set test data
%                     end

                elseif M == 4
                    csv_data = [num0, ...
                        reshape(real(r), [1, 4]), reshape(imag(r), [1, 4]), ...
                        reshape(real(H), [1, 16]), reshape(imag(H), [1, 16]), ...
                        reshape(real(const_s), [1, 4]), reshape(imag(const_s), [1, 4]), ...
                        reshape(real(s_num), [1, 4]), reshape(imag(s_num), [1, 4])];

                    writematrix(csv_data, 'MIMO_4_0dB.csv', 'WriteMode', 'append');       % Set train data

%                     if rem(num3, 5) == 0
%                         writematrix(csv_data, 'MIMO_4_0dB_test.csv', 'WriteMode', 'append');      % Set test data
%                     end
                end
            end

            % Find minimize value of |r-Hs|
            [~, min_index]= min(sum(abs(r - H*s_NoC)));

            s_hat = s_NoC(:, min_index);
            % change s_hat to bit code
            s_hat_bit = Bit_Change(s_hat, M);

            % Error counting per antenna
            for num2 = 1:2*M
                if s_bit(num2) == s_hat_bit(num2)
                    ;
                else
                    error_cnt(num0) = error_cnt(num0) + 1;
                end
            end
        end
        ML_BER_num(num00, num0) = error_cnt(num0)/(N_Iter*M*Modulation_Order);
%     end
end
ML_BER = sum(ML_BER_num) / (2^Modulation_Order)^(M-1);